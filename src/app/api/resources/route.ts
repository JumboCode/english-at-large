import { NextResponse } from "next/server";
import { OnlineResource } from "@prisma/client";
import {
  deleteResourceController,
  getAllResourcesController,
  getOneResourceController,
  postResourceController,
  putResourceController,
} from "./controller";

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const resourceIdParam = searchParams.get("id"); // Assuming the ID is passed as a query parameter
    if (resourceIdParam) {
      const resourceId = resourceIdParam; // Convert the string to a number

      // If a valid ID is provided, fetch a single resource
      const resource = await getOneResourceController(resourceId);
      if (!resource) {
        return NextResponse.json({ error: "Resource not found" }, { status: 404 });
      }
      return NextResponse.json(resource);
    } else {
      // If no ID is provided, fetch all resources
      const resources = await getAllResourcesController();
      return NextResponse.json(resources);
    }
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { error: `Failed to fetch resources: ${error}` },
      { status: 500 }
    );
  }
}

// POST - Create a new resource
export async function POST(req: Request) {
  try {
    // Omit excludes the requirement of 'id' field since it's generated by neon.tech
    const resourceData: Omit<OnlineResource, "id"> = await req.json();
    // controller defined in controller.ts
    const newResource = await postResourceController(resourceData);

    return NextResponse.json(newResource, { status: 201 });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { error: `Failed to create resource: ${error}` },
      { status: 500 }
    );
  }
}

// PUT - Update a resource
export async function PUT(req: Request) {
  try {
    const resourceData: OnlineResource = await req.json();

    const updatedResource = await putResourceController(resourceData);

    return NextResponse.json(updatedResource, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { error: `Failed to update resource: ${error}` },
      { status: 500 }
    );
  }
}

// DELETE - Delete a resource
export async function DELETE(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const resourceIdParam = searchParams.get("id");
    const resourceId = resourceIdParam;

    if (!resourceId) {
      return NextResponse.json(
        { error: "Resource ID is required" },
        { status: 400 }
      );
    }

    const deletedResource = await deleteResourceController(resourceId);

    return NextResponse.json(deletedResource, { status: 200 });
  } catch (error) {
    return NextResponse.json(
      { error: `Failed to delete resource: ${error}` },
      { status: 500 }
    );
  }
}
