import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { User } from "@prisma/client";
import { postUserController } from "./controller";
import { validateUserData } from "@/lib/util/types";
import { putUserController } from "./controller";

// GET - retrieve all users or single user by ID
export async function GET(req: Request) {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id"); // Get the 'id' query parameter
  
    try {
      if (id) {
        // if id, fetch the specific user
        const user = await prisma.user.findUnique({
          where: { id: id },
        });
        
        if (!user) {
          return NextResponse.json(
            { error: "User not found" },
            { status: 404 }
          );
        }
  
        return NextResponse.json(user);
      } else {
        // if no id, fetch all users
        const users = await prisma.user.findMany();
        return NextResponse.json(users);
      }
    } catch (error) {
      return NextResponse.json(
        { error: "Failed to fetch users" },
        { status: 500 }
      );
    }
  }

// POST - create new user
export async function POST(req: Request) {
    try {
        // Omit the requirement of 'id' field since it's generated by neon.tech
        const userData: Omit<User, "id"> = await req.json();
    
        // controller defined in controller.ts
        const newUser = postUserController(userData);
    
        return NextResponse.json(newUser, { status: 201 });
      } catch (error) {
        throw error; // throws error to the front end for better debugging, swap this out for below code
        // when passing to client
    
        return NextResponse.json(
          { error: "Failed to create user" },
          { status: 500 }
        );
      }
}

export async function PUT(req: Request) {
    try {
      const userData: User = await req.json();
      const updatedUser = putUserController(userData)
      
      
  
      return NextResponse.json(updatedUser);
    } catch (error) {
      return NextResponse.json(
        { error: "Failed to update user" },
        { status: 500 }
      );
    }
  }
