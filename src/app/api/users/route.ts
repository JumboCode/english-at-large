import { NextResponse } from "next/server";
import { requireUserWithRole, requireUserWithRoleOrInvite } from "@/lib/auth";
import { User } from "@prisma/client";
import {
  getAllUsersController,
  postUserController,
  putUserController,
  deleteUserController,
  getOneUserController,
  getOneUserByClerkController,
} from "./controller";

// GET - retrieve all users or single user by ID
export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const id = searchParams.get("id");
  const clerkId = searchParams.get("clerkId");

  // Extract pagination parameters
  const page = parseInt(searchParams.get("page") || "1", 10); // new
  const limit = parseInt(searchParams.get("limit") || "10", 10); // new

  // try {
  //   await requireUserWithRole(["Admin", "Volunteer"]);
  // } catch (err) {
  //   console.error(err);
  //   return NextResponse.json({ message: "Unauthorized" }, { status: 403 });
  // }

  try {
    if (id) {
      // if id, fetch the specific user
      const user = await getOneUserController(id);
      return NextResponse.json(user);
    }
    if (clerkId) {
      const user = await getOneUserByClerkController(clerkId);
      return NextResponse.json(user);
    } else {
      // if no id, fetch all users
      // const users: User[] = await getAllUsersController();
      // return NextResponse.json(users);
      const fromDateStr = searchParams.get("fromDate");
      const endDateStr = searchParams.get("endDate");

      const fromDate = fromDateStr ? new Date(fromDateStr) : undefined;
      const endDate = endDateStr ? new Date(endDateStr) : undefined;

      if (
        (fromDate && isNaN(fromDate.getTime())) ||
        (endDate && isNaN(endDate.getTime()))
      ) {
        return NextResponse.json(
          { error: "Invalid date format" },
          { status: 400 }
        );
      }

      const effectiveFromDate = fromDate ?? new Date(0);
      const effectiveEndDate = endDate ?? new Date();
      const searchParam = searchParams.get("search") ?? undefined;
      const { users, total, totalPages } = await getAllUsersController(
        page,
        limit,
        effectiveFromDate,
        effectiveEndDate,
        searchParam
      ); // new
      return NextResponse.json({ users, total, totalPages, page }); // new
    }
  } catch (error) {
    if (error instanceof Error) {
      return NextResponse.json(
        { error: "Failed to fetch users:" + error },
        { status: 500 }
      );
    } else {
      return NextResponse.json(
        { error: "Failed to fetch users: an unknown error occurred." },
        { status: 500 }
      );
    }
  }
}

// POST - create new user
export async function POST(req: Request) {
  try {
    // Omit the requirement of 'id' field since it's generated by neon.tech
    const userData: Omit<User, "id"> = await req.json();

    // controller defined in controller.ts
    const newUser = await postUserController(userData);
    return NextResponse.json(newUser, { status: 201 });
  } catch (error) {
    if (error instanceof Error) {
      return NextResponse.json(
        { error: "Failed to create user:" + error },
        { status: 500 }
      );
    } else {
      return NextResponse.json(
        { error: "Failed to create user: an unknown error occurred." },
        { status: 500 }
      );
    }
  }
}

// PUT - update user
export async function PUT(req: Request) {
  try {
    await requireUserWithRoleOrInvite(["Admin"], true); // Allow new invited users
  } catch (err) {
    console.error(err);
    return NextResponse.json({ message: "Unauthorized" }, { status: 403 });
  }

  try {
    const userData: User = await req.json();
    const updatedUser = putUserController(userData);
    return NextResponse.json(updatedUser, { status: 200 });
  } catch (error) {
    if (error instanceof Error) {
      return NextResponse.json(
        { error: "Failed to update user:" + error },
        { status: 500 }
      );
    } else {
      return NextResponse.json(
        { error: "Failed to update user: an unknown error occurred." },
        { status: 500 }
      );
    }
  }
}

// DELETE - delete user by id
export async function DELETE(req: Request) {
  try {
    await requireUserWithRole(["Admin", "Volunteer"]);
  } catch (err) {
    console.error(err);
    return NextResponse.json({ message: "Unauthorized" }, { status: 403 });
  }

  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");

    if (id) {
      // if id, delete the specific user
      const deletedUser = await deleteUserController(id);
      if (!deletedUser)
        return NextResponse.json(
          { error: "UserID not found!" },
          { status: 404 }
        );

      return NextResponse.json(deletedUser, { status: 200 });
    } else {
      return NextResponse.json({ error: "No ID provided" }, { status: 400 });
    }
  } catch (error) {
    if (error instanceof Error) {
      return NextResponse.json(
        { error: "Failed to delete user:" + error },
        { status: 500 }
      );
    } else {
      return NextResponse.json(
        { error: "Failed to delete user: an unknown error occurred." },
        { status: 500 }
      );
    }
  }
}
