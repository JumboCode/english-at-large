import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { Book } from "@prisma/client";
import { validateBookData } from "@/lib/util/types";

// GET - Fetch all books
export async function GET() {
  try {
    const books = await prisma.book.findMany();
    return NextResponse.json(books);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to fetch books" },
      { status: 500 }
    );
  }
}

// POST - Create a new book
export async function POST(req: Request) {
  try {
    // Omit excludes the requirement of 'id' field since it's generated by neon.tech
    const bookData: Omit<Book, "id"> = await req.json();

    // Validate required fields. Note that empty strings are also false values (so they can't be blank)
    if (!validateBookData(bookData)) {
      return NextResponse.json(
        { error: "Missing required book properties" },
        { status: 400 }
      );
    }

    const newBook = await prisma.book.create({
      data: bookData,
    });

    return NextResponse.json(newBook, { status: 201 });
  } catch (error) {
    throw error; // throws error to the front end for better debugging, swap this out for below code
    // when passing to client

    return NextResponse.json(
      { error: "Failed to create book" },
      { status: 500 }
    );
  }
}

// PUT - Update a book
export async function PUT(req: Request) {
  try {
    const bookData: Book = await req.json();

    // handle id validation as well since validateBookData doesn't validate ID
    if (!bookData.id || !validateBookData(bookData)) {
      return NextResponse.json(
        { error: "Missing id, and name or owner" },
        { status: 400 }
      );
    }

    const updatedBook = await prisma.book.update({
      where: { id: bookData.id },
      data: bookData,
    });

    return NextResponse.json(updatedBook);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to update book" },
      { status: 500 }
    );
  }
}

// DELETE - Delete a book
export async function DELETE(req: Request) {
  try {
    const bookData: Book = await req.json();

    if (!bookData.id) {
      return NextResponse.json({ error: "Missing id" }, { status: 400 });
    }

    await prisma.book.delete({
      where: { id: bookData.id },
    });

    return NextResponse.json({ message: "Book deleted successfully" });
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to delete book" },
      { status: 500 }
    );
  }
}
