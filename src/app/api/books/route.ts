import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { Book } from "@prisma/client";
// import { validateBookData } from "@/lib/util/types";
import { deleteBookController, postBookController, putBookController } from "./controller";

// GET - Fetch all books
export async function GET() {
  try {
    const books = await prisma.book.findMany();
    return NextResponse.json(books);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to fetch books" },
      { status: 500 }
    );
  }
}

// POST - Create a new book
export async function POST(req: Request) {
  try {
    // Omit excludes the requirement of 'id' field since it's generated by neon.tech
    const bookData: Omit<Book, "id"> = await req.json();
    // controller defined in controller.ts
    const newBook = postBookController(bookData);

    return NextResponse.json(newBook, { status: 201 });
  } catch (error) {
    throw error; // throws error to the front end for better debugging, swap this out for below code
    // when passing to client

    return NextResponse.json(
      { error: "Failed to create book" },
      { status: 500 }
    );
  }
}

// PUT - Update a book
export async function PUT(req: Request) {
  try {
    const bookData: Book = await req.json();

    const updatedBook = putBookController(bookData);

    return NextResponse.json(updatedBook, {status: 200});
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to update book" },
      { status: 500 }
    );
  }
}

// DELETE - Delete a book
export async function DELETE(req: Request) {
  try {
    const bookData: Book = await req.json();

    const deletedBook = deleteBookController(bookData);

    return NextResponse.json(deletedBook, {status: 200});
    
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to delete book" },
      { status: 500 }
    );
  }
}
