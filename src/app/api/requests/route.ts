import { NextResponse } from "next/server";
import { Request as BookRequest } from "@prisma/client" ;
import { postController } from "./controller";
import { getController } from "./controller";
import { putController } from "./controller";
import { deleteController } from "./controller";

// GET - Fetch all requests
export async function GET() {
  try {
    const response = getController();
    return NextResponse.json(response);
  } catch (error) {
    return error;
  }
}
 
// POST - Create a new request
export async function POST(req: Request) {
  try {
    // Omit excludes the requirement of 'id' field since it's generated by neon.tech
    const requestData: Omit<BookRequest, "id"> = await req.json();

    // controller defined in controller.ts
    const newRequest = postController(requestData);
    
    return NextResponse.json(newRequest);
  } catch (error) {
    return NextResponse.json(
      { error: "Failed to create user" },
      { status: 500 }
    );
  }
}

// PUT - Update a request
export async function PUT(req: Request) {
  try {
    const requestData: BookRequest = await req.json();
    // controller defined in controllers.ts
    const updated = putController(requestData);

    return NextResponse.json(updated);
  } catch (error) {
    return error;
  }
}

// DELETE - Delete a request
export async function DELETE(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id") as unknown;
    console.log(id as number)
    
    if(id != null){
      //+id casts id from a string to a number 
      deleteController(+id);
      return NextResponse.json({ message: "Request deleted successfully" });
    } else {
      return NextResponse.json(
        { error: "No ID provided" },
        { status: 400 });
    }
  } catch (error) {
    return error;
  }
}
