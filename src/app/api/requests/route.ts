import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { Book } from "@prisma/client";
import { validateBookData } from "@/lib/util/types";
import { postController } from "./controllers";
import { getController } from "./controllers";
import { putController } from "./controllers";
import { deleteController } from "./controllers";

// GET - Fetch all books
export async function GET() {
  try {
    const get = getController();
    return NextResponse.json(get);
  } catch (error) {
    return error;
  }
}
 
// POST - Create a new book
export async function POST(req: Request) {
  try {
    // Omit excludes the requirement of 'id' field since it's generated by neon.tech
    const requestData: Omit<Request, "id"> = await req.json();

    // controller defined in controller.ts
    const newRequest = postController(requestData);

    return NextResponse.json(newRequest, { status: 201 });
  } catch (error) {
    throw error; // throws error to the front end for better debugging, swap this out for below code
    // when passing to client
    return error;
  }
}

// PUT - Update a book
export async function PUT(req: Request) {
  try {
    const requestData: Request = await req.json();

    // controller defined in controllers.ts
    const updated = putController(requestData);

    return NextResponse.json(updated);
  } catch (error) {
    return error;
  }
}

// DELETE - Delete a book
export async function DELETE(req: Request) {
  try {
    const requestData: Request = await req.json();

    deleteController(requestData);

    return NextResponse.json({ message: "Book deleted successfully" });
  } catch (error) {
    return error;
  }
}
