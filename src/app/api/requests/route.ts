import { NextResponse } from "next/server";
import { Request as BookRequest } from "@prisma/client";
import { getOneRequestController, postRequestController } from "./controller";
import { getAllRequestsController } from "./controller";
import { putRequestController } from "./controller";
import { deleteRequestController } from "./controller";

// GET - Fetch all requests
export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const id = searchParams.get("id");
  try {
    if (id) {
      // if id, fetch the specific user
      const request = await getOneRequestController(+id);
      return NextResponse.json(request);
    } else {
      // if no id, fetch all users
      const requests: BookRequest[] = await getAllRequestsController();
      return NextResponse.json(requests);
    }
  } catch (error) {
    return error;
  }
}

// POST - Create a new request
export async function POST(req: Request) {
  try {
    // Omit excludes the requirement of 'id' field since it's generated by neon.tech
    const requestData: Omit<BookRequest, "id"> = await req.json();

    // controller defined in controller.ts
    const newRequest = postRequestController(requestData);
    return NextResponse.json(newRequest);
  } catch (error) {
    return NextResponse.json(
      { error: `Failed to create user: ${error}` },
      { status: 500 }
    );
  }
}

// PUT - Update a request
export async function PUT(req: Request) {
  try {
    const requestData: BookRequest = await req.json();
    // controller defined in controllers.ts
    const updated = putRequestController(requestData);

    return NextResponse.json(updated);
  } catch (error) {
    return error;
  }
}

// DELETE - Delete a request
export async function DELETE(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id") as string;

    //+id casts id from a string to a number
    deleteRequestController(+id);
  } catch (error) {
    return error;
  }
}
