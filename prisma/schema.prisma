generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  role      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  // Relation to Request
  requests  Request[] // One user can have many requests

  @@map("users")
}

model Book {
  id        Int       @id @default(autoincrement())
  title     String
  isbn      String
  level     String
  booktype  String[]
  scanLink  String
  notes     String?
  status    String
  
  // Foreign key to BookGroup. Is optional until we implement the BookGroup logic
  // groupId   Int?       // Foreign key to BookGroup
  // group     BookGroup? @relation(fields: [groupId], references: [id]) // Relation to BookGroup
  
  // Relation to Request
  requests  Request[] // One book can be requested in many requests

  @@map("Books")
}

// model BookGroup {
//   id    Int     @id @default(autoincrement())
//   title String
//   books Book[]  // One group can have many books

//   @@map("BookGroups")
// }

model Request {
  id        Int        @id @default(autoincrement())
  userId    String     // Foreign key to User
  bookId    Int        // Foreign key to Book
  status    String
  createdAt DateTime
  message   String
  bookTitle String

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("Requests")
}
